# スプリント振り返りプロセスルール

## 概要

このルールは、AWSオブザーバビリティ学習用eコマースアプリプロジェクトにおけるスプリント振り返り（レトロスペクティブ）の標準プロセスを定義します。
一貫性のある振り返りを通じて、継続的な改善を実現することを目的とします。

## 基本原則

1. **全てのスプリント終了時に必ず実施する**
2. **事実に基づいた客観的な評価を行う**
3. **具体的で実行可能な改善アクションを設定する**
4. **過去の改善アクションの実施状況を評価する**
5. **次スプリントの計画に反映させる**

## 振り返り実施タイミング

- **実施タイミング**: スプリント終了日（最終日の作業完了後）
- **所要時間**: 30分〜1時間
- **前提条件**: スプリント計画Issueの日誌が完了していること

## 振り返りIssue作成手順

### 1. Issue作成準備

- **テンプレート**: `.github/ISSUE_TEMPLATE/retrospective.md`を使用
- **タイトル形式**: `RT-[スプリント番号2桁]: スプリント [番号] 振り返り ([終了日YYYY/MM/DD])`
- **ラベル**: `retrospective`
- **アサイン**: 自分自身

### 2. 事前準備作業

以下の情報を収集・整理してから振り返りを開始する：

- [ ] スプリント計画Issueの目標を再確認
- [ ] 日誌の全記録を通読
- [ ] 完了・未完了のPBI一覧を整理
- [ ] 前回レトロスペクティブの改善アクション実施状況を確認
- [ ] GitHub Projects / Issues の実際の進捗状況を確認

## 評価項目とフレームワーク

### A. スプリント目標達成度評価

各目標について以下の5段階で評価：

- **達成**: 100%完了、期待通りの品質
- **ほぼ達成**: 90%以上完了、一部品質改善余地あり
- **一部達成**: 50-90%完了、重要な部分は実現
- **未達**: 50%未満、または品質に重大な問題
- **変更**: 妥当な理由により目標を変更

**評価記述のポイント**:

- 定量的な根拠を含める（完了率、品質指標等）
- 達成/未達の具体的な理由を明記
- 想定との差異とその原因を分析

### B. 成果物確認

完成した全ての成果物について：

- [ ] PBI Issue番号とタイトル
- [ ] 受け入れ基準との照合結果
- [ ] 品質評価（コードレビュー、テスト、ドキュメント等）
- [ ] 今後の改善点や懸念事項

### C. KPTフレームワーク適用

#### Keep（良かったこと・続けたいこと）

**記述指針**:

- 具体的なプロセス、ツール、判断、成果を記載
- なぜ良かったのか理由も含める
- 定量的な効果があれば数値で示す
- 今後も継続すべき理由を明記

**観点例**:

- 開発プロセス（計画、実装、レビュー）
- ツール活用（GitHub Projects、AI支援等）
- 技術的判断・アーキテクチャ決定
- 学習・成長に関する取り組み
- 時間管理・優先順位付け

#### Problem（問題点・課題）

**記述指針**:

- 根本原因まで掘り下げて分析
- 感情的な表現を避け、事実ベースで記述
- 影響度の大きさを明確にする
- 再発可能性を評価する

**分類**:

- **技術的課題**: 知識不足、技術選択、実装品質等
- **プロセス課題**: 計画精度、見積もり、進捗管理等
- **時間管理課題**: スコープ、優先順位、割り込み対応等
- **学習効率課題**: 調査方法、習得アプローチ等

#### Try（次に試すこと・改善アクション）

**設定基準**:

- Problem で特定した課題に対する具体的な解決策
- 次スプリントで実行可能な内容に限定
- 測定可能な成功指標を設定
- 1スプリントあたり2-3個の改善アクションに絞る

**記述形式**:

```markdown
- **改善アクション名**: [具体的な実施内容]
  - 対象問題: [関連するProblem]
  - 実施時期: [スプリント開始時/計画時/実装時等]
  - 成功指標: [どうなれば成功か]
  - 実施責任: [自分/チーム等]
```

## AI活用に関する振り返り観点

### AI支援ツール活用評価

毎回以下の観点で振り返りを実施：

**効果測定**:

- [ ] どのタスクでAIを活用したか
- [ ] 活用による時間短縮効果
- [ ] 生成されたコード/ドキュメントの品質
- [ ] 学習効率への影響

**改善ポイント**:

- [ ] プロンプトエンジニアリングの改善余地
- [ ] AI出力のレビュープロセス適正性
- [ ] 過度な依存による自身のスキル習得への影響
- [ ] セキュリティ・品質リスクの管理状況

## 次スプリントへの引き継ぎ

### 1. 改善アクションの正式採用

振り返りで設定したTryの中から、次スプリントで実際に試す改善アクションを決定：

- [ ] 実行可能性の再評価
- [ ] 優先順位付け（最大3個まで）
- [ ] 具体的な実施方法の詳細化

### 2. スプリント計画への反映

次スプリント計画時に必ず以下を実施：

- [ ] 改善アクションを計画に組み込む
- [ ] Problemで特定された課題を考慮したリスク評価
- [ ] Keepで特定された良いプラクティスの継続確認
- [ ] 見積もり精度向上のための学習内容反映

### 3. 継続課題の管理

- [ ] 未解決のProblemをプロダクトバックログまたは技術的負債として記録
- [ ] 長期的な改善が必要な項目のエピック化検討
- [ ] 複数スプリントにわたる改善テーマの進捗追跡

## チェックリスト

振り返り完了前に以下を確認：

### 振り返り品質チェック

- [ ] 全ての目標について達成度評価が記載されている
- [ ] KPTそれぞれに具体的で実行可能な項目が含まれている
- [ ] 改善アクションが次スプリントで実行可能な内容になっている
- [ ] 事実に基づいた客観的な評価になっている
- [ ] AI活用に関する振り返りが含まれている

### 次スプリント準備チェック

- [ ] 振り返り結果を次スプリント計画に反映する準備ができている
- [ ] 継続課題がプロダクトバックログに適切に記録されている
- [ ] 改善アクションの実施方法が明確になっている

## 品質保持のための注意事項

1. **感情的な評価を避ける**: 事実ベースで客観的に評価する
2. **具体性を重視**: 抽象的な表現ではなく具体的な事例や数値を用いる
3. **前向きな姿勢**: 問題は改善の機会として捉える
4. **実行可能性を重視**: 理想論ではなく現実的に実行可能な改善策を考える
5. **継続性を意識**: 一回限りではなく、継続的な改善サイクルを意識する

---

このルールに従って振り返りを実施することで、プロジェクト全体の品質向上と継続的な改善を実現する。
