version: "3"

tasks:
  setup:
    desc: プロジェクトのセットアップを行います
    cmds:
      - mkdir -p backend/tmp
      - mkdir -p infra/localstack/logs
      - mkdir -p infra/traefik
      - echo "セットアップが完了しました"

  start:
    desc: Docker Compose環境を起動します
    cmds:
      - docker compose up -d
      - 'echo "環境が起動しました。以下のURLでアクセスできます:"'
      - 'echo "- フロントエンド（顧客向け）: http://shop.localhost"'
      - 'echo "- フロントエンド（管理者向け）: http://admin.localhost"'
      - 'echo "- バックエンドAPI: http://api.localhost"'
      - 'echo "- PhpMyAdmin: http://db.localhost"'
      - 'echo "- Traefikダッシュボード: http://traefik.localhost:8080"'

  stop:
    desc: Docker Compose環境を停止します
    cmds:
      - docker compose down
      - echo "環境を停止しました"

  restart:
    desc: Docker Compose環境を再起動します
    cmds:
      - docker compose restart
      - echo "環境を再起動しました"

  restart:backend:
    desc: バックエンドコンテナを再起動します
    cmds:
      - docker compose restart backend

  clean:
    desc: 環境をクリーンアップします（ボリュームも削除）
    cmds:
      - docker compose down -v
      - echo "環境をクリーンアップしました（ボリュームも削除されました）"

  logs:
    desc: 全コンテナのログを表示します
    cmds:
      - docker compose logs -f

  logs:backend:
    desc: バックエンドコンテナのログを表示します
    cmds:
      - docker compose logs -f backend

  logs:frontend-customer:
    desc: 顧客向けフロントエンドコンテナのログを表示します
    cmds:
      - docker compose logs -f frontend-customer

  logs:frontend-admin:
    desc: 管理者向けフロントエンドコンテナのログを表示します
    cmds:
      - docker compose logs -f frontend-admin

  logs:traefik:
    desc: Traefikコンテナのログを表示します
    cmds:
      - docker compose logs -f traefik

  logs:localstack:
    desc: LocalStackコンテナのログを表示します
    cmds:
      - docker compose logs -f localstack

  traefik:dashboard:
    desc: Traefikダッシュボードをブラウザで開きます
    cmds:
      - open http://traefik.localhost:8080 || xdg-open http://traefik.localhost:8080 || echo "http://traefik.localhost:8080 にアクセスしてください"

  traefik:check:
    desc: Traefikの設定を確認します
    cmds:
      - docker compose exec traefik traefik healthcheck

  test:backend:
    desc: バックエンドのテストを実行します
    cmds:
      - docker compose exec backend go test ./tests/...

  test:backend:handlers:
    desc: バックエンドのハンドラーテストを実行します
    cmds:
      - docker compose exec backend go test ./tests/unit/api/handlers/...

  test:backend:coverage:
    desc: バックエンドのテストカバレッジを生成します
    cmds:
      - docker compose exec backend bash -c "go test ./tests/... -coverprofile=coverage.out && go tool cover -html=coverage.out -o coverage.html"
      - docker compose cp backend:/app/coverage.html ./
      - echo "カバレッジレポートが ./coverage.html に保存されました"

  test:frontend-customer:
    desc: 顧客向けフロントエンドのテストを実行します
    cmds:
      - docker compose exec frontend-customer npm test

  test:frontend-customer:component:
    desc: 顧客向けフロントエンドの特定のコンポーネントテストを実行します
    cmds:
      - docker compose exec frontend-customer npm test -- {{.CLI_ARGS}}

  test:frontend-admin:
    desc: 管理者向けフロントエンドのテストを実行します
    cmds:
      - docker compose exec frontend-admin npm test

  # golangci-lint タスク - バックエンド用
  lint:backend:
    desc: バックエンドのコードをlintでチェックします
    cmds:
      - docker compose exec backend golangci-lint run ./...

  lint:backend:fast:
    desc: バックエンドのコードを高速モードでlintチェックします
    cmds:
      - docker compose exec backend golangci-lint run --fast ./...

  lint:backend:fix:
    desc: 自動修正可能な問題を修正します
    cmds:
      - docker compose exec backend golangci-lint run --fix ./...

  lint:backend:specific:
    desc: 特定のリンターのみでチェックします
    cmds:
      - docker compose exec backend golangci-lint run --disable-all --enable={{.CLI_ARGS}} ./...
      - 'echo "使用例: task lint:backend:specific -- errcheck,gosimple"'

  # ESLint/Prettier タスク - フロントエンド用
  lint:frontend-customer:
    desc: 顧客向けフロントエンドのコードをlintでチェックします
    cmds:
      - docker compose exec frontend-customer npm run lint

  lint:frontend-customer:fix:
    desc: 顧客向けフロントエンドの自動修正可能な問題を修正します
    cmds:
      - docker compose exec frontend-customer npm run lint:fix

  lint:frontend-customer:style:
    desc: 顧客向けフロントエンドのコードスタイルをチェックします
    cmds:
      - docker compose exec frontend-customer npm run prettier:check

  lint:frontend-customer:style:fix:
    desc: 顧客向けフロントエンドのコードスタイルを修正します
    cmds:
      - docker compose exec frontend-customer npm run prettier:write

  lint:frontend-admin:
    desc: 管理者向けフロントエンドのコードをlintでチェックします
    cmds:
      - docker compose exec frontend-admin npm run lint

  lint:frontend-admin:fix:
    desc: 管理者向けフロントエンドの自動修正可能な問題を修正します
    cmds:
      - docker compose exec frontend-admin npm run lint:fix

  lint:frontend-admin:style:
    desc: 管理者向けフロントエンドのコードスタイルをチェックします
    cmds:
      - docker compose exec frontend-admin npm run prettier:check

  lint:frontend-admin:style:fix:
    desc: 管理者向けフロントエンドのコードスタイルを修正します
    cmds:
      - docker compose exec frontend-admin npm run prettier:write

  # 全体のlintチェック
  lint:all:
    desc: すべてのコードをlintでチェックします
    cmds:
      - task: lint:backend
      - task: lint:frontend-customer
      - task: lint:frontend-admin
      - echo "すべてのコードのlintチェックが完了しました"

  lint:all:fix:
    desc: すべてのコードの自動修正可能な問題を修正します
    cmds:
      - task: lint:backend:fix
      - task: lint:frontend-customer:fix
      - task: lint:frontend-admin:fix
      - task: lint:frontend-customer:style:fix
      - task: lint:frontend-admin:style:fix
      - echo "すべてのコードの自動修正が完了しました"

  # ローカル環境のlintタスク
  lint:local:backend:
    desc: ローカル環境でバックエンドのコードをlintチェックします
    dir: backend
    cmds:
      - golangci-lint run ./...

  lint:local:frontend-customer:
    desc: ローカル環境で顧客向けフロントエンドのコードをlintチェックします
    dir: frontend-customer
    cmds:
      - npm run lint

  lint:local:frontend-admin:
    desc: ローカル環境で管理者向けフロントエンドのコードをlintチェックします
    dir: frontend-admin
    cmds:
      - npm run lint

  shell:backend:
    desc: バックエンドコンテナのシェルを起動します
    cmds:
      - docker compose exec backend sh

  shell:frontend-customer:
    desc: 顧客向けフロントエンドコンテナのシェルを起動します
    cmds:
      - docker compose exec frontend-customer sh

  shell:frontend-admin:
    desc: 管理者向けフロントエンドコンテナのシェルを起動します
    cmds:
      - docker compose exec frontend-admin sh

  shell:mysql:
    desc: MySQLコンテナに接続します
    cmds:
      - docker compose exec mysql mysql -uroot -ppassword ecommerce

  localstack:check:
    desc: LocalStackの状態を確認します
    cmds:
      - docker compose exec backend aws --endpoint-url=http://localstack:4566 --profile localstack --region ap-northeast-1 cloudwatch list-metrics
      - echo "LocalStackの状態を確認しました"

  awslocal:
    desc: "AWS CLIをLocalStack用に実行する"
    vars:
      AWS_ENDPOINT_URL: http://localstack:4566
      AWS_ACCESS_KEY_ID: localstack
      AWS_SECRET_ACCESS_KEY: localstack
      AWS_DEFAULT_REGION: ap-northeast-1
    cmds:
      - docker-compose exec -e AWS_ENDPOINT_URL={{.AWS_ENDPOINT_URL}} -e AWS_ACCESS_KEY_ID={{.AWS_ACCESS_KEY_ID}} -e AWS_SECRET_ACCESS_KEY={{.AWS_SECRET_ACCESS_KEY}} -e AWS_DEFAULT_REGION={{.AWS_DEFAULT_REGION}} localstack aws {{.CLI_ARGS}}
    silent: true

  aws-logs-list-groups:
    desc: "CloudWatch Logsのロググループを一覧表示"
    cmds:
      - task: awslocal
        vars:
          CLI_ARGS: logs describe-log-groups

  aws-logs-create-group:
    desc: "CloudWatch Logsのロググループを作成"
    cmds:
      - task: awslocal
        vars:
          CLI_ARGS: logs create-log-group --log-group-name {{.GROUP_NAME}}

  tflocal:
    desc: "TerraformをLocalStack用に実行する"
    dir: infrastructure
    vars:
      AWS_ENDPOINT_URL: http://localstack:4566
      AWS_ACCESS_KEY_ID: localstack
      AWS_SECRET_ACCESS_KEY: localstack
      AWS_DEFAULT_REGION: ap-northeast-1
    cmds:
      - >
        docker run --rm -v $(pwd):/workspace -w /workspace
        --network ecsite-network
        -e AWS_ENDPOINT_URL={{.AWS_ENDPOINT_URL}}
        -e AWS_ACCESS_KEY_ID={{.AWS_ACCESS_KEY_ID}}
        -e AWS_SECRET_ACCESS_KEY={{.AWS_SECRET_ACCESS_KEY}}
        -e AWS_DEFAULT_REGION={{.AWS_DEFAULT_REGION}}
        hashicorp/terraform:latest {{.TF_ARGS}}
    silent: true

  tf-init:
    desc: "Terraformを初期化"
    cmds:
      - task: tflocal
        vars:
          TF_ARGS: init

  tf-plan:
    desc: "Terraformの実行計画を表示"
    cmds:
      - task: tflocal
        vars:
          TF_ARGS: plan

  tf-apply:
    desc: "Terraformを適用"
    cmds:
      - task: tflocal
        vars:
          TF_ARGS: apply -auto-approve
