services:
  traefik:
    image: traefik:latest
    container_name: traefik
    restart: always
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - ./infra/traefik:/etc/traefik
    networks:
      - aws-observability-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: backend
    restart: always
    volumes:
      - ./backend:/app
    expose:
      - "8080"
    environment:
      - APP_NAME=aws-observability-ecommerce
      - APP_VERSION=1.0.0
      - APP_ENV=development
      - PORT=8080
      # ログ設定
      - LOG_PRESET=local-debug
#      - LOG_LEVEL=debug
#      - LOG_FORMAT=json
#      - LOG_USE_CONSOLE=true
#      - LOG_USE_FILE=true
#      - LOG_FILE_PATH=logs/app.log
#      - LOG_USE_CLOUDWATCH=true
#      - LOG_CREATE_LOG_GROUP=true
#      - LOG_GROUP_NAME=/aws-observability-ecommerce/dev/backend
#      - LOG_CLOUDWATCH_FLUSH_SECS=10
#      - LOG_CLOUDWATCH_BATCH_SIZE=200
      # AWS設定
      - AWS_USE_LOCALSTACK=true
      - AWS_REGION=ap-northeast-1
      - AWS_ENDPOINT=http://localstack:4566
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
    depends_on:
      mysql:
        condition: service_healthy
      localstack:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      # shop.localhostのAPIエンドポイント
      - "traefik.http.routers.shop-api.rule=Host(`shop.localhost`) && PathPrefix(`/api`)"
      - "traefik.http.routers.shop-api.entrypoints=web"
      # admin.localhostのAPIエンドポイント
      - "traefik.http.routers.admin-api.rule=Host(`admin.localhost`) && PathPrefix(`/api`)"
      - "traefik.http.routers.admin-api.entrypoints=web"
      # api.localhostのAPIエンドポイント（オプション）
      - "traefik.http.routers.backend-api.rule=Host(`api.localhost`)"
      - "traefik.http.routers.backend-api.entrypoints=web"
      # 共通のサービス設定
      - "traefik.http.services.backend.loadbalancer.server.port=8080"
    networks:
      - aws-observability-network

  frontend-customer:
    build:
      context: ./frontend-customer
      dockerfile: Dockerfile.dev
    container_name: frontend-customer
    restart: always
    volumes:
      - ./frontend-customer:/app
      - /app/node_modules
    expose:
      - "3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://backend:8080/api
    depends_on:
      - backend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend-customer.rule=Host(`shop.localhost`) && !PathPrefix(`/api`)"
      - "traefik.http.routers.frontend-customer.entrypoints=web"
      - "traefik.http.services.frontend-customer.loadbalancer.server.port=3000"
    networks:
      - aws-observability-network

  frontend-admin:
    build:
      context: ./frontend-admin
      dockerfile: Dockerfile.dev
    container_name: frontend-admin
    restart: always
    volumes:
      - ./frontend-admin:/app
      - /app/node_modules
    expose:
      - "3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://backend:8080/api
    depends_on:
      - backend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend-admin.rule=Host(`admin.localhost`) && !PathPrefix(`/api`)"
      - "traefik.http.routers.frontend-admin.entrypoints=web"
      - "traefik.http.services.frontend-admin.loadbalancer.server.port=3000"
    networks:
      - aws-observability-network

  mysql:
    image: mysql:latest
    container_name: mysql
    restart: always
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=root_password
      - MYSQL_DATABASE=ecommerce
      - MYSQL_USER=ecommerce_user
      - MYSQL_PASSWORD=ecommerce_password
    volumes:
      - mysql_data:/var/lib/mysql
      - ./infra/mysql/init:/docker-entrypoint-initdb.d
    healthcheck:
      test:
        [
          "CMD",
          "mysqladmin",
          "ping",
          "-h",
          "localhost",
          "-u",
          "root",
          "-p$$MYSQL_ROOT_PASSWORD",
        ]
      interval: 5s
      timeout: 5s
      retries: 5
    labels:
      - "traefik.enable=false" # Traefikからの直接アクセスは不要
    networks:
      - aws-observability-network

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin
    restart: always
    expose:
      - "80"
    environment:
      - PMA_HOST=mysql
      - PMA_USER=ecommerce_user
      - PMA_PASSWORD=ecommerce_password
      - UPLOAD_LIMIT=300M
    depends_on:
      - mysql
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.phpmyadmin.rule=Host(`db.localhost`)"
      - "traefik.http.services.phpmyadmin.loadbalancer.server.port=80"
    networks:
      - aws-observability-network

  localstack:
    image: localstack/localstack:latest
    container_name: localstack
    restart: always
    ports:
      - "4566:4566" # LocalStackのメインエンドポイント
      - "4510-4559:4510-4559" # 内部サービス用ポート範囲
    environment:
      - SERVICES=cloudwatch,logs,s3
      - DEFAULT_REGION=ap-northeast-1
      - AWS_DEFAULT_REGION=ap-northeast-1
      - AWS_ACCESS_KEY_ID=localstack
      - AWS_SECRET_ACCESS_KEY=localstack
      - HOSTNAME_EXTERNAL=localstack
      - DOCKER_HOST=unix:///var/run/docker.sock
      - DEBUG=1
    volumes:
      - ./infra/localstack:/etc/localstack/init/ready.d
      - /var/run/docker.sock:/var/run/docker.sock
      - localstack_data:/var/lib/localstack

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4566/_localstack/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s
    labels:
      - "traefik.enable=false" # Traefikからの直接アクセスは不要
    networks:
      - aws-observability-network

volumes:
  mysql_data:
  localstack_data:

networks:
  aws-observability-network:
    name: aws-observability-network
