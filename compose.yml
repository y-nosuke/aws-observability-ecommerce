services:
  # Traefikリバースプロキシサービス
  traefik:
    image: traefik:latest
    container_name: traefik
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    ports:
      - "80:80" # HTTP
      - "443:443" # HTTPS
      - "8080:8080" # Dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./infra/traefik/config/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./infra/traefik/dynamic:/etc/traefik/dynamic:ro
      - ./logs/traefik:/var/log/traefik
    networks:
      - ecommerce-network
    deploy:
      resources:
        limits:
          memory: 256M

  # バックエンドAPIサービス
  backend-api:
    build:
      context: ./backend-api
      dockerfile: Dockerfile
    container_name: backend-api
    restart: unless-stopped
    expose:
      - "8000"
    environment:
      - APP_NAME=aws-observability-ecommerce
      - APP_VERSION=1.0.0
      - APP_ENV=development
      - PORT=8000
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_NAME=${MYSQL_DATABASE:-ecommerce}
      - DB_USER=${MYSQL_USER:-ecommerce_user}
      - DB_PASSWORD=${MYSQL_PASSWORD:-ecommerce_password}
      - DB_DSN=ecommerce_user:ecommerce_password@tcp(mysql:3306)/ecommerce
      - AWS_USE_LOCALSTACK=true
      - AWS_REGION=ap-northeast-1
      - AWS_ENDPOINT=http://localstack:4566
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      # OpenTelemetry設定
      - OTEL_EXPORTER_OTLP_ENDPOINT=otel-collector:4318
      - OTEL_SERVICE_NAME=aws-observability-ecommerce
      - OTEL_SERVICE_VERSION=1.0.0
      - OTEL_RESOURCE_ATTRIBUTES=service.name=aws-observability-ecommerce,service.version=1.0.0,deployment.environment=development
    volumes:
      - ./backend-api:/app # ホットリロード用
    depends_on:
      mysql:
        condition: service_healthy
      # otel-collector:
      #   condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend-api.rule=Host(`backend-api.localhost`)"
      - "traefik.http.routers.backend-api.entrypoints=web"
      - "traefik.http.services.backend-api.loadbalancer.server.port=8000"
      - "traefik.http.routers.backend-api.middlewares=secure-headers@file,cors@file"
    networks:
      - ecommerce-network

  # 顧客向けフロントエンドNext.jsサービス
  frontend-customer:
    build:
      context: ./frontend-customer
      dockerfile: Dockerfile
    container_name: frontend-customer
    restart: unless-stopped
    environment:
      - NEXT_PUBLIC_API_URL=/api
      - BACKEND_API_URL=http://backend-api:8000/api
    volumes:
      - ./frontend-customer:/app # ホットリロード用
      - /app/node_modules # node_modulesはコンテナ内のまま
      - /app/.next # .nextディレクトリはコンテナ内のまま
    expose:
      - "3000"
    depends_on:
      - backend-api
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.customer.rule=Host(`customer.localhost`)"
      - "traefik.http.routers.customer.entrypoints=web"
      - "traefik.http.services.customer.loadbalancer.server.port=3000"
      - "traefik.http.routers.customer.middlewares=secure-headers@file,cors@file"
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 15s
    deploy:
      resources:
        limits:
          memory: 512M

  # 管理者向けフロントエンドNext.jsサービス
  frontend-admin:
    build:
      context: ./frontend-admin
      dockerfile: Dockerfile
    container_name: frontend-admin
    restart: unless-stopped
    environment:
      - NEXT_PUBLIC_API_URL=http://backend-api:8000/api
    volumes:
      - ./frontend-admin:/app
      - /app/node_modules
    expose:
      - "3000"
    depends_on:
      - backend-api
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.admin.rule=Host(`admin.localhost`)"
      - "traefik.http.routers.admin.entrypoints=web"
      - "traefik.http.services.admin.loadbalancer.server.port=3000"
      - "traefik.http.routers.admin.middlewares=secure-headers@file,cors@file"
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 15s
    deploy:
      resources:
        limits:
          memory: 512M

  mysql:
    image: mysql:latest
    container_name: mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-rootpassword}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-ecommerce}
      MYSQL_USER: ${MYSQL_USER:-ecommerce_user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-ecommerce_password}
    ports:
      - "3306:3306"
    volumes:
      - ./infra/mysql/initdb.d:/docker-entrypoint-initdb.d:ro
      - ./infra/mysql/conf.d:/etc/mysql/conf.d:ro
      - mysql_data:/var/lib/mysql
    healthcheck:
      test:
        [
          "CMD",
          "mysqladmin",
          "ping",
          "-h",
          "localhost",
          "-u",
          "root",
          "-p${MYSQL_ROOT_PASSWORD:-rootpassword}",
        ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    labels:
      - "traefik.enable=false" # Traefikからの直接アクセスは不要
    networks:
      - ecommerce-network
    deploy:
      resources:
        limits:
          memory: 512M

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin
    restart: unless-stopped
    expose:
      - "80"
    environment:
      - PMA_HOST=mysql
      - PMA_USER=ecommerce_user
      - PMA_PASSWORD=ecommerce_password
      - UPLOAD_LIMIT=300M
    depends_on:
      - mysql
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.phpmyadmin.rule=Host(`phpmyadmin.localhost`)"
      - "traefik.http.services.phpmyadmin.loadbalancer.server.port=80"
      - "traefik.http.routers.phpmyadmin.middlewares=secure-headers@file,cors@file"
    networks:
      - ecommerce-network

  localstack:
    image: localstack/localstack:latest
    container_name: localstack
    restart: unless-stopped
    environment:
      - SERVICES=s3,cloudwatch,logs,events,sns,sqs,lambda,iam
      - LAMBDA_EXECUTOR=docker
      - DEFAULT_REGION=ap-northeast-1
      - AWS_DEFAULT_REGION=ap-northeast-1
      - AWS_ACCESS_KEY_ID=localstack
      - AWS_SECRET_ACCESS_KEY=localstack
      - HOSTNAME_EXTERNAL=localstack
      - DOCKER_HOST=unix:///var/run/docker.sock
      - DEBUG=1
    ports:
      - "4566:4566" # LocalStackの主要ポート（すべてのAWSサービスへのアクセスに使用）
      - "4571:4571" # Localstack Gateway
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./infra/localstack/init-scripts:/etc/localstack/init/ready.d:ro
      - localstack_data:/var/lib/localstack
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4566/_localstack/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s
    deploy:
      resources:
        limits:
          memory: 1G
    labels:
      - "traefik.enable=false" # Traefikからの直接アクセスは不要
    networks:
      - ecommerce-network

  otel-collector:
    image: otel/opentelemetry-collector:latest
    container_name: otel-collector
    restart: unless-stopped
    ports:
      - "4318:4318"
      - "13133:13133"
    volumes:
      - ./infra/otel/config.yaml:/etc/otel-collector-config.yaml:ro
    command: ["--config=/etc/otel-collector-config.yaml"]
    depends_on:
      - loki
      - tempo
      - mimir
      # loki:
      #   condition: service_healthy
      # mimir:
      #   condition: service_healthy
      # tempo:
      #   condition: service_healthy
    networks:
      - ecommerce-network
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:13133/"]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 3
    #   start_period: 10s
    # deploy:
    #   resources:
    #     limits:
    #       memory: 256M

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    volumes:
      - ./infra/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./infra/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - grafana_data:/var/lib/grafana
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=false
    depends_on:
      - loki
      - tempo
      - mimir
      # loki:
      #   condition: service_healthy
      # mimir:
      #   condition: service_healthy
      # tempo:
      #   condition: service_healthy
    networks:
      - ecommerce-network
    # healthcheck:
    #   test:
    #     [
    #       "CMD",
    #       "wget",
    #       "--no-verbose",
    #       "--tries=1",
    #       "--spider",
    #       "http://localhost:3000/api/health",
    #     ]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 3
    #   start_period: 20s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.localhost`)"
      - "traefik.http.routers.grafana.entrypoints=web"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
      - "traefik.http.routers.grafana.middlewares=secure-headers@file,cors@file"
    # deploy:
    #   resources:
    #     limits:
    #       memory: 256M

  loki:
    image: grafana/loki:3.4.1
    container_name: loki
    restart: unless-stopped
    volumes:
      - ./infra/loki/config.yaml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    command: ["-config.file=/etc/loki/local-config.yaml"]
    # healthcheck:
    #   test:
    #     [
    #       "CMD",
    #       "wget",
    #       "--no-verbose",
    #       "--tries=1",
    #       "--spider",
    #       "http://localhost:3100/ready",
    #     ]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 3
    #   start_period: 15s
    networks:
      - ecommerce-network
    # deploy:
    #   resources:
    #     limits:
    #       memory: 512M

  mimir:
    image: grafana/mimir:latest
    container_name: mimir
    restart: unless-stopped
    command: ["-config.file=/etc/mimir/config.yaml"]
    ports:
      # ingesterが起動しないので、確認するために一時的にポートを開ける
      - "9009:9009" # HTTP API
    volumes:
      - ./infra/mimir/config.yaml:/etc/mimir/config.yaml:ro
      - mimir_data:/mimir
    networks:
      - ecommerce-network
    # 起動に時間がかかるのでヘルスチェックを無効化
    # healthcheck:
    #   test:
    #     [
    #       "CMD",
    #       "wget",
    #       "--no-verbose",
    #       "--tries=1",
    #       "--spider",
    #       "http://localhost:9009/ready",
    #     ]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 3
    #   start_period: 30s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mimir.rule=Host(`mimir.localhost`)"
      - "traefik.http.routers.mimir.entrypoints=web"
      - "traefik.http.services.mimir.loadbalancer.server.port=9009"
      - "traefik.http.routers.mimir.middlewares=secure-headers@file,cors@file"
    # deploy:
    #   resources:
    #     limits:
    #       memory: 1G

  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    restart: unless-stopped
    command: ["-config.file=/etc/tempo/config.yaml"]
    volumes:
      - ./infra/tempo/config.yaml:/etc/tempo/config.yaml:ro
      - tempo_data:/var/tempo
    networks:
      - ecommerce-network
    # healthcheck:
    #   test:
    #     [
    #       "CMD",
    #       "wget",
    #       "--no-verbose",
    #       "--tries=1",
    #       "--spider",
    #       "http://localhost:3200/ready",
    #     ]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 3
    #   start_period: 15s

volumes:
  mysql_data:
    driver: local
  localstack_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
  mimir_data:
    driver: local
  tempo_data:
    driver: local

networks:
  ecommerce-network:
    driver: bridge
    name: ecommerce-network
